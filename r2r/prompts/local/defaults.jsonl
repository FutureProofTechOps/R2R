{"name": "default_system", "template": "You are a helpful assistant.", "input_types": {}}
{"name": "default_rag", "template": "## Task:\n\nAnswer the query given immediately below given the context which follows later. Use line item references to like [1], [2], ... refer to specifically numbered items in the provided context. Pay close attention to the title of each given source to ensure it is consistent with the query.\n\n### Query:\n{query}\n\n### Context:\n{context}\n\n### Query:\n{query}\n\nREMINDER - Use line item references to like [1], [2], ... refer to specifically numbered items in the provided context.\n## Response:\n", "input_types": {"query": "str", "context": "str"}}
{"name": "hyde", "template": "### Instruction:\n\nGiven the query that follows write a double newline separated list of {num_outputs} single paragraph distinct attempted answers to the given query. \nDO NOT generate any single answer which is likely to require information from multiple distinct documents, \nEACH single answer will be used to carry out a cosine similarity semantic search over distinct indexed documents, such as varied medical documents. \nFOR EXAMPLE if asked `how do the key themes of Great Gatsby compare with 1984`, the two attempted answers would be \n`The key themes of Great Gatsby are ... ANSWER_CONTINUED` and `The key themes of 1984 are ... ANSWER_CONTINUED`, where `ANSWER_CONTINUED` IS TO BE COMPLETED BY YOU in your response. \nHere is the original user query to be transformed into answers:\n\n### Query:\n{message}\n\n### Response:\n", "input_types": {"num_outputs": "int", "message": "str"}}
{"name": "rag_fusion_prompt", "template": "### Instruction:\n\nGiven the following query that follows to write a double newline separated list of up to {num_outputs} queries meant to help answer the original query. \nDO NOT generate any single query which is likely to require information from multiple distinct documents, \nEACH single query will be used to carry out a cosine similarity semantic search over distinct indexed documents, such as varied medical documents. \nFOR EXAMPLE if asked `how do the key themes of Great Gatsby compare with 1984`, the two queries would be \n`What are the key themes of Great Gatsby?` and `What are the key themes of 1984?`.\nHere is the original user query to be transformed into answers:\n\n### Query:\n{message}\n\n### Response:\n", "input_types": {"num_outputs": "int", "message": "str"}}
{"name": "rag_answer_eval", "template": "### Instruction:\n\nYou are given a `query`, related `context` and an associated `answer`. Your task is to sequentially score each sentence in the given answer as either 1 or 0, based on whether or not the given sentence is relevant to the given query and supported in full by the given context.\n### Example:\n#### Input:\n\nQuery:\nWhy does Alice prefer spending her mornings in the garden?\n\nContext:\nAlice loves to read books in her garden. She has a large collection of mystery novels. Every morning, she spends an hour reading while drinking her favorite tea. Her garden is filled with various flowers, and she especially loves the roses. On weekends, Alice's friend, Bob, often joins her for tea and they discuss the books they've read.\n\nAnswer:\nAlice enjoys her mornings in the garden because she loves to read there. She often listens to music while reading.\n####### Response:\n\n([1,0], '1/2')### Input:\nQuery:\n{query}\n\nContext:\n{context}\n\nAnswer:\n{answer}\n\nResponse:\n\n",  "input_types": {"query": "str", "context": "str", "answer": "str"}}
{"name": "rag_context_eval", "template": "### Instruction:\n\nYou are given a `query` and an associated `context`. Your task is to sequentially score each sentence in the context as either 1 or 0, based on the relevancy to the given query. For instance, if the query is \"What is the capital of France?\" then the sentence \"The capital of France is Paris\" would receive a +1 value, whereas \"The french enjoy wine\" would receive a 0. Return your response as a tuple containing a list of 1s and 0s, where each value corresponds to the respective sentence in the context, and then the rational fraction of 1's to the total number of sentences (e.g. '1/4'). NOTE - do not include ANY extra text other than the requested tuple.\n\nQuery:\n{query}\n\nContext:\n{context}\n\n###Response\n\n", "input_types": {"query": "str", "context": "str"}}
{"name": "ner_kg_extraction", "template": "### Instruction\nYou will shortly be asked to perform Named Entity Recognition (NER) and knowledge graph triplet extraction on the text that follows. NER involves identifying named entities in a text, and knowledge graph triplet extraction involves identifying relationships between these entities and other attributes in the text.\n\nReturn the results with this format:\n- `subject`: The main entity.\n- `predicate`: The relationship type.\n- `object`: The related entity.\n\nEntities should be categorized from the following list:\n\n```markdown\nEntity Categories and Types:\n\n1. person:\n   - Names of people.\n\n2. personType:\n   - Job types or roles held by a person.\n\n3. location:\n   - Natural and human-made landmarks, structures, geographical features, and geopolitical entities.\n   - Subcategories:\n     - geopoliticalEntity: Cities, countries/regions, states.\n     - structural: Manmade structures.\n     - geographical: Geographic and natural features such as rivers, oceans, and deserts.\n\n4. organization:\n   - Companies, political groups, musical bands, sport clubs, government bodies, and public organizations.\n   - Subcategories:\n     - medical: Medical companies and groups.\n     - stockExchange: Stock exchange groups.\n     - sports: Sports-related organizations.\n\n5. event:\n   - Historical, social, and naturally occurring events.\n   - Subcategories:\n     - cultural: Cultural events and holidays.\n     - natural: Naturally occurring events.\n     - sports: Sporting events.\n\n6. product:\n   - Physical objects of various categories.\n   - Subcategories:\n     - computingProducts: Computing products.\n\n7. skill:\n   - A capability, skill, or expertise.\n\n8. address:\n   - Full mailing address.\n\n9. phoneNumber:\n   - Phone numbers (US and EU phone numbers only).\n\n10. email:\n    - Email addresses.\n\n11. url:\n    - URLs to websites.\n\n12. ip:\n    - Network IP addresses.\n\n13. dateTime:\n    - Dates and times of day.\n    - Subcategories:\n      - date: Calendar dates.\n      - time: Times of day.\n      - dateRange: Date ranges.\n      - timeRange: Time ranges.\n      - duration: Durations.\n      - set: Set, repeated times.\n\n14. quantity:\n    - Numbers and numeric quantities.\n    - Subcategories:\n      - number: Numbers.\n      - percentage: Percentages.\n      - ordinalNumbers: Ordinal numbers.\n      - age: Ages.\n      - currency: Currencies.\n      - dimensions: Dimensions and measurements.\n      - temperature: Temperatures.\n\n15. other:\n    - Any entity that does not fit into the above categories.\n```\n\nUse the following list as a starting point and example for common predicates:\n\n- `is`: Used to state something about an entity.\n- `also known as`: Used to specify an alternate name or alias for an entity.\n- `headquartered in`: Used to indicate the main location of an organization.\n- `located in`: Used to specify the location of an entity.\n- `founded in`: Used to indicate the founding date of an organization.\n- `works at`: Used to indicate a person's workplace.\n- `born in`: Used to specify the birthplace of a person.\n- `died in`: Used to specify the place or time of death of a person.\n- `created by`: Used to indicate the creator of a product or work.\n- `published in`: Used to specify the publication date of a work.\n- `member of`: Used to indicate membership in an organization.\n- `partnered with`: Used to specify a partnership between entities.\n- `studied at`: Used to indicate where a person studied.\n- `married to`: Used to indicate marital relationships.\n- `authored by`: Used to specify the author of a work.\n- `discovered in`: Used to indicate the discovery location of an entity.\n- `developed by`: Used to indicate the developer of a product or technology.\n- `won by`: Used to specify the winner of an event or award.\n- `held in`: Used to indicate the location of an event.\n- `owned by`: Used to specify ownership of an entity.\n- `released in`: Used to indicate the release date of a product.\n- `head of`: Used to indicate leadership roles within organizations.\n- `manufactured by`: Used to indicate the manufacturer of a product.\n- `introduced in`: Used to indicate the introduction date of a product.\n\n### Example:\n\n**Input:**\n`The Hyundai Motor Company, often referred to as Hyundai Motors, and commonly known as Hyundai, is a South Korean multinational automotive manufacturer headquartered in Seoul, South Korea, which was founded in 1967. The Hyundai Sonata is a mid-size car that has been manufactured by Hyundai since 1985. The first generation Sonata, which was introduced in 1985, was a facelifted version of the Hyundai Stellar with an engine upgrade, and was withdrawn from the market in two years due to poor customer reaction. While the nameplate was originally only sold in South Korea, the second generation of 1988 was widely exported.`\n\n**Output:**\n```json\n{{\n    \"entities\": {{\n        \"[1]\": \"organization: Hyundai Motor Company\",\n        \"[2]\": \"organization: Hyundai Motors\",\n        \"[3]\": \"organization: Hyundai\",\n        \"[4]\": \"location:geopoliticalEntity: South Korea\",\n        \"[5]\": \"location:geopoliticalEntity: Seoul\",\n        \"[6]\": \"dateTime:date: 1967\",\n        \"[7]\": \"product: Hyundai Sonata\",\n        \"[8]\": \"product: Hyundai Stellar\",\n        \"[9]\": \"dateTime:date: 1985\",\n        \"[10]\": \"dateTime:date: 1988\",\n        \"[11]\": \"dateTime:date: 1987\"\n    }},\n    \"triplets\": [\n        \"[1]: also known as: [2]\",\n        \"[1]: also known as: [3]\",\n        \"[1]: headquartered in: [5]\",\n        \"[1]: located in: [4]\",\n        \"[1]: founded in: [6]\",\n        \"[7]: manufactured by: [3]\",\n        \"[7]: introduced in: [9]\",\n        \"[7]: facelifted version of: [8]\",\n        \"[7]: originally sold in: [4]\",\n        \"[7]: second generation released in: [10]\",\n        \"[7]: second generation: widely exported\",\n        \"[8]: engine upgrade: [7]\",\n        \"[8]: withdrawn from the market in: [11]\"\n    ]\n}}\n```\n\n### Example\n\n**Input:**\n`DNA sequencing can be used to identify new species and improve the accuracy of taxonomic classification through several methods. These methods involve analyzing the genetic information of organisms and comparing them to known species to determine their evolutionary relationships and unique characteristics.\n\n1. DNA barcoding: This technique involves sequencing a specific, standardized region of an organism's DNA, usually the mitochondrial cytochrome c oxidase I (COI) gene in animals or the chloroplast genes rbcL and matK in plants. The DNA barcode serves as a unique identifier for each species, allowing researchers to compare the genetic information of an unknown organism to a database of known species. If the DNA barcode of the unknown organism does not match any known species, it may be considered a new species.\n\n2. Molecular phylogenetics: This approach uses DNA sequences to reconstruct the evolutionary relationships among organisms. By comparing the DNA sequences of different species, researchers can identify shared ancestry and create a phylogenetic tree that represents the evolutionary history of the organisms. If an unknown organism's DNA sequence does not fit within any existing group on the phylogenetic tree, it may be considered a new species.\n\n3. Comparative genomics: This method involves comparing the entire genome of an unknown organism to those of known species. By analyzing the similarities and differences in the genetic information, researchers can identify unique genes and other genomic features that may be characteristic of a new species. Additionally, comparative genomics can provide insights into the evolutionary processes that have shaped the genomes of different species, further refining taxonomic classification.\n\n4. Metagenomics: This technique involves sequencing the DNA of entire communities of organisms, such as those found in environmental samples like soil or water. By analyzing the genetic information present in these samples, researchers can identify previously unknown species that may not have been detected using traditional methods, such as morphological analysis.\n\nUsing DNA sequencing to identify new species and improve taxonomic classification has several advantages over traditional methods:\n\n1. Objectivity: DNA sequencing provides a more objective and standardized approach to species identification, reducing the potential for human error and bias in morphological analysis.\n\n2. Resolution: DNA sequencing can reveal genetic differences between closely related species that may be difficult to distinguish based on morphology alone.\n\n3. Speed and efficiency: DNA sequencing technologies have become faster and more affordable, allowing researchers to analyze large numbers of samples and identify new species more quickly than traditional methods.\n\n4. Discovery of cryptic species: DNA sequencing can reveal the existence of cryptic species, which are groups of organisms that are genetically distinct but morphologically indistinguishable from one another.\n\nIn conclusion, DNA sequencing is a powerful tool for identifying new species and improving the accuracy of taxonomic classification. By analyzing the genetic information of organisms, researchers can uncover previously unknown species, refine our understanding of evolutionary relationships, and ultimately enhance our knowledge of biodiversity.`\n\n**Output:**\n```json\n{{\n    \"entities\": {{\n        \"[1]\": \"skill: DNA sequencing\",\n        \"[2]\": \"skill: DNA barcoding\",\n        \"[3]\": \"skill: Molecular phylogenetics\",\n        \"[4]\": \"skill: Comparative genomics\",\n        \"[5]\": \"skill: Metagenomics\",\n        \"[6]\": \"product: mitochondrial cytochrome c oxidase I (COI) gene\",\n        \"[7]\": \"product: chloroplast genes rbcL and matK\",\n        \"[8]\": \"product: DNA barcode\",\n        \"[9]\": \"product: phylogenetic tree\",\n        \"[10]\": \"product: genome\",\n        \"[11]\": \"product: environmental samples\",\n        \"[12]\": \"skill: morphological analysis\",\n        \"[13]\": \"skill: taxonomic classification\",\n        \"[14]\": \"skill: species identification\",\n        \"[15]\": \"skill: evolutionary relationships\",\n        \"[16]\": \"skill: biodiversity\"\n    }},\n    \"triplets\": [\n        \"[2]: involves: [1]\",\n        \"[2]: uses: [6]\",\n        \"[2]: uses: [7]\",\n        \"[8]: serves as: unique identifier\",\n        \"[3]: uses: [1]\",\n        \"[3]: reconstructs: [15]\",\n        \"[3]: creates: [9]\",\n        \"[4]: involves: [1]\",\n        \"[4]: compares: [10]\",\n        \"[5]: involves: [1]\",\n        \"[5]: sequences: [11]\",\n        \"[1]: improves: [13]\",\n        \"[1]: identifies: new species\",\n        \"[1]: provides: objectivity\",\n        \"[1]: reveals: genetic differences\",\n        \"[1]: increases: speed and efficiency\",\n        \"[1]: discovers: cryptic species\",\n        \"[1]: enhances: [16]\"\n    ]\n}}\n```\n\n### Task:\nYour task is to perform Named Entity Recognition (NER) and knowledge graph triplet extraction on the text that follows:\n{input_text}\n\n#### Notes:\n  - Your response must be in valid JSON format with 'entities' and 'triplets' as keys. You should aim to combine entities where possible.\n  - You should infer only what is explicitly stated in the text, without making assumptions based on past knowledge.\n  - You should ALWAYS return ONLY a named entity reference like `[17]` when specifying a named entity as the target in the extracted triplets. You should put any modifiers into the predicate. For instance, return a result LIKE `[1]: enacts on behalf of: [2]` or `[1]: becomes ward of: [2]`, e.g. `[X]: y: [Y]`, NEVER `[1]: enacts: on behalf of [2]` or `[X]: y: z [Y]`.\n\n### Response:\n", "input_types": {"input_text" : "str"}}